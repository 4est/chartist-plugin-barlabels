{"version":3,"sources":["chartist-plugin-barlabels.js"],"names":["root","factory","define","amd","returnExportsGlobal","exports","module","this","getHighValue","chart","options","horizontalBars","axisX","high","axisY","data","series","length","constructor","Array","reduce","prev","curr","concat","Math","max","apply","getThresholdClass","val","percentage","aboveLabelClass","belowLabelClass","window","document","Chartist","defaultOptionsBase","labelClass","labelInterpolationFnc","noop","showZeroLabels","includeIndexClass","thresholdOptions","defaultOptionsHorizontalBars","labelOffset","x","y","textAnchor","defaultOptionsVerticalBars","plugins","ctBarLabels","Bar","extend","highValue","on","type","barValue","undefined","value","indexClass","seriesIndex","index","join","thresholdClass","group","elem","x2","y2","style","text"],"mappings":";;;;;;CAAC,SAAUA,EAAMC,GACO,kBAAXC,SAAyBA,OAAOC,IAEzCD,UAAW,WACT,MAAQF,GAAKI,oBAAsBH,MAET,gBAAZI,SAIhBC,OAAOD,QAAUJ,IAEjBD,EAAK,gCAAkCC,KAEzCM,KAAM,WAoIN,MAlIC,UAASP,EAAMC,GACQ,kBAAXC,SAAyBA,OAAOC,IAEzCD,UAAW,WACT,MAAQF,GAAKI,oBAAsBH,MAET,gBAAZI,SAIhBC,OAAOD,QAAUJ,IAEjBD,EAAK,gCAAkCC,KAEzCM,KAAM,WA+EN,QAASC,GAAaC,GAGpB,GAAIA,EAAMC,QAAQC,gBAAkBF,EAAMC,QAAQE,OAASH,EAAMC,QAAQE,MAAMC,KAE7E,MAAOJ,GAAMC,QAAQE,MAAMC,IACtB,KAAKJ,EAAMC,QAAQC,gBAAkBF,EAAMC,QAAQI,OAASL,EAAMC,QAAQI,MAAMD,KAErF,MAAOJ,GAAMC,QAAQI,MAAMD,IACtB,IAAIJ,EAAMC,QAAQG,KAEvB,MAAOJ,GAAMC,QAAQG,IAGrB,IAAIJ,EAAMM,MAAQN,EAAMM,KAAKC,QAAUP,EAAMM,KAAKC,OAAOC,OAAS,EAAG,CACnE,GAAID,GAASP,EAAMM,KAAKC,MAOxB,OALIA,GAAO,GAAGE,cAAgBC,QAC5BH,EAASA,EAAOI,OAAO,SAASC,EAAMC,GAAQ,MAAOD,GAAKE,OAAOD,MAI5DE,KAAKC,IAAIC,MAAM,KAAMV,IAKlC,QAASW,GAAkBjB,EAASG,EAAMe,GACxC,MAAIlB,IAAWG,EACLe,EAAMf,EAAO,IAAMH,EAAQmB,WAAcnB,EAAQoB,gBAAkBpB,EAAQqB,gBAE5E,GAjCX,MAvEC,UAASC,EAAQC,EAAUC,GAC1B,YAEA,IAAIC,IACFC,WAAY,WACZC,sBAAuBH,EAASI,KAChCC,gBAAgB,EAChBC,mBAAmB,EACnBC,kBACEZ,WAAY,GACZE,gBAAiB,iBACjBD,gBAAiB,mBAIjBY,GACFC,aACEC,EAAG,EACHC,EAAG,GAELC,WAAY,SAGVC,GACFJ,aACEC,EAAG,EACHC,EAAG,IAELC,WAAY,SAGdZ,GAASc,QAAUd,EAASc,YAC5Bd,EAASc,QAAQC,YAAc,SAASvC,GAEtC,MAAO,UAAqBD,GAC1B,GAAIA,YAAiByB,GAASgB,IAAK,CAEjCxC,EAAUwB,EAASiB,UAAWhB,EAAoBzB,GAEhDA,EADED,EAAMC,QAAQC,eACNuB,EAASiB,UAAWT,EAA8BhC,GAElDwB,EAASiB,UAAWJ,EAA4BrC,EAE5D,IAAI0C,EACA1C,GAAQ+B,mBACVW,EAAY5C,EAAaC,IAG3BA,EAAM4C,GAAG,OAAQ,SAAStC,GACxB,GAAkB,QAAdA,EAAKuC,KAAgB,CAGvB,GAAIC,GAA4BC,SAAjBzC,EAAK0C,MAAMb,EAAkB7B,EAAK0C,MAAMZ,EAAI9B,EAAK0C,MAAMb,EAClEc,EAAahD,EAAQ8B,mBAAqB,kBAAmBzB,EAAK4C,YAAa,IAAK5C,EAAK6C,OAAOC,KAAK,IAAM,GAC3GC,EAAiBnC,EAAkBjB,EAAQ+B,iBAAkBW,EAAWG,IAExE7C,EAAQ6B,iBAAoB7B,EAAQ6B,gBAA8B,GAAZgB,IACxDxC,EAAKgD,MAAMC,KAAK,QACdpB,EAAG7B,EAAKkD,GAAKvD,EAAQiC,YAAYC,EACjCC,EAAG9B,EAAKmD,GAAKxD,EAAQiC,YAAYE,EACjCsB,MAAO,gBAAkBzD,EAAQoC,aAC/BpC,EAAQ0B,WAAYsB,EAAYI,GAAgBD,KAAK,MAAMO,KAAK1D,EAAQ2B,sBAAsBkB,WAQ9GvB,OAAQC,SAAUC,UAEbA,SAASc,QAAQC,cAuCnBf,SAASc,QAAQC","file":"chartist-plugin-barlabels.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.returnExportsGlobal = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Chartist.plugins.ctBarLabels'] = factory();\n  }\n}(this, function () {\n\n  (function(root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n      // AMD. Register as an anonymous module.\r\n      define([], function() {\r\n        return (root.returnExportsGlobal = factory());\r\n      });\r\n    } else if (typeof exports === 'object') {\r\n      // Node. Does not work with strict CommonJS, but\r\n      // only CommonJS-like enviroments that support module.exports,\r\n      // like Node.\r\n      module.exports = factory();\r\n    } else {\r\n      root['Chartist.plugins.ctBarLabels'] = factory();\r\n    }\r\n  }(this, function() {\r\n\r\n    /**\r\n     * Chartist.js plugin to display a data label on a bar in a bar chart.\r\n     */\r\n    /* global Chartist */\r\n    (function(window, document, Chartist) {\r\n      'use strict';\r\n\r\n      var defaultOptionsBase = {\r\n        labelClass: 'ct-label',\r\n        labelInterpolationFnc: Chartist.noop,\r\n        showZeroLabels: false,\r\n        includeIndexClass: false,\r\n        thresholdOptions: {\r\n          percentage: 30,\r\n          belowLabelClass: 'ct-label-below',\r\n          aboveLabelClass: 'ct-label-above'\r\n        }\r\n      };\r\n\r\n      var defaultOptionsHorizontalBars = {\r\n        labelOffset: {\r\n          x: 2,\r\n          y: 4\r\n        },\r\n        textAnchor: 'start'\r\n      }\r\n\r\n      var defaultOptionsVerticalBars = {\r\n        labelOffset: {\r\n          x: 0,\r\n          y: -2\r\n        },\r\n        textAnchor: 'middle'\r\n      }\r\n\r\n      Chartist.plugins = Chartist.plugins || {};\r\n      Chartist.plugins.ctBarLabels = function(options) {\r\n\r\n        return function ctBarLabels(chart) {\r\n          if (chart instanceof Chartist.Bar) {\r\n\r\n            options = Chartist.extend({}, defaultOptionsBase, options);\r\n            if (chart.options.horizontalBars) {\r\n              options = Chartist.extend({}, defaultOptionsHorizontalBars, options);\r\n            } else {\r\n              options = Chartist.extend({}, defaultOptionsVerticalBars, options);\r\n            }\r\n            var highValue;\r\n            if (options.thresholdOptions) {\r\n              highValue = getHighValue(chart);\r\n            }\r\n\r\n            chart.on('draw', function(data) {\r\n              if (data.type === 'bar') {\r\n\r\n                // bar value is in a different spot depending on whether or not the chart is horizontalBars\r\n                var barValue = data.value.x === undefined ? data.value.y : data.value.x;\r\n                var indexClass = options.includeIndexClass ? ['ct-bar-label-i-', data.seriesIndex, '-', data.index].join('') : '';\r\n                var thresholdClass = getThresholdClass(options.thresholdOptions, highValue, barValue);\r\n\r\n                if (options.showZeroLabels || (!options.showZeroLabels && barValue != 0)) {\r\n                  data.group.elem('text', {\r\n                    x: data.x2 + options.labelOffset.x,\r\n                    y: data.y2 + options.labelOffset.y,\r\n                    style: 'text-anchor: ' + options.textAnchor\r\n                  }, [options.labelClass, indexClass, thresholdClass].join(' ')).text(options.labelInterpolationFnc(barValue));\r\n                }\r\n              }\r\n            });\r\n          }\r\n        };\r\n      };\r\n\r\n    }(window, document, Chartist));\r\n\r\n    return Chartist.plugins.ctBarLabels;\r\n\r\n    function getHighValue(chart) {\r\n\r\n      // respect the user provided options for the max value first\r\n      if (chart.options.horizontalBars && chart.options.axisX && chart.options.axisX.high) {\r\n        // the horizontal chart has a high on the X axis\r\n        return chart.options.axisX.high;\r\n      } else if (!chart.options.horizontalBars && chart.options.axisY && chart.options.axisY.high) {\r\n        // the vertical chart has a high on the Y axis\r\n        return chart.options.axisY.high;\r\n      } else if (chart.options.high) {\r\n        // the chart has a high set on its own options\r\n        return chart.options.high;\r\n      } else {\r\n        // the user did not set any high value, so we will need to calculate the max value\r\n        if (chart.data && chart.data.series && chart.data.series.length > 0) {\r\n          var series = chart.data.series;\r\n          // check to see if there are multiple series\r\n          if (series[0].constructor === Array) {\r\n            series = series.reduce(function(prev, curr) { return prev.concat(curr)});\r\n          }\r\n\r\n          // return the highest value\r\n          return Math.max.apply(null, series);\r\n        }\r\n      }\r\n    }\r\n\r\n    function getThresholdClass(options, high, val) {\r\n      if (options && high) {\r\n        return (val / high * 100 > options.percentage) ? options.aboveLabelClass : options.belowLabelClass;\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n\r\n  }));\r\n\n  return Chartist.plugins.ctBarLabels;\n\n}));\n"]}